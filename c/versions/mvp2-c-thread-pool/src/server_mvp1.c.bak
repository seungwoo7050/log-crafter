#include "server.h"

// [SEQUENCE: 4] Global server instance for signal handling
static log_server_t* g_server = NULL;

// [SEQUENCE: 5] Signal handler for graceful shutdown
static void sigint_handler(int sig) {
    (void)sig; // Suppress unused parameter warning
    if (g_server) {
        g_server->running = 0;
    }
}

// [SEQUENCE: 6] Server creation and initialization
log_server_t* server_create(int port) {
    log_server_t* server = malloc(sizeof(log_server_t));
    if (!server) {
        perror("malloc");
        return NULL;
    }
    
    server->port = port;
    server->listen_fd = -1;
    server->max_fd = -1;
    server->client_count = 0;
    server->running = 1;
    FD_ZERO(&server->master_set);
    FD_ZERO(&server->read_set);
    
    return server;
}

void server_destroy(log_server_t* server) {
    if (!server) return;
    
    // [SEQUENCE: 7] Close all client connections
    for (int fd = 0; fd <= server->max_fd; fd++) {
        if (FD_ISSET(fd, &server->master_set) && fd != server->listen_fd) {
            close(fd);
        }
    }
    
    if (server->listen_fd >= 0) {
        close(server->listen_fd);
    }
    
    free(server);
}

int server_init(log_server_t* server) {
    struct sockaddr_in server_addr;
    int yes = 1;
    
    // [SEQUENCE: 8] Create socket
    server->listen_fd = socket(AF_INET, SOCK_STREAM, 0);
    if (server->listen_fd < 0) {
        perror("socket");
        return -1;
    }
    
    // [SEQUENCE: 9] Set socket options
    if (setsockopt(server->listen_fd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(yes)) < 0) {
        perror("setsockopt");
        return -1;
    }
    
    // [SEQUENCE: 10] Bind socket
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(server->port);
    
    if (bind(server->listen_fd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {
        perror("bind");
        return -1;
    }
    
    // [SEQUENCE: 11] Listen for connections
    if (listen(server->listen_fd, BACKLOG) < 0) {
        perror("listen");
        return -1;
    }
    
    // [SEQUENCE: 12] Add listener to master set
    FD_SET(server->listen_fd, &server->master_set);
    server->max_fd = server->listen_fd;
    
    // [SEQUENCE: 13] Setup signal handler
    g_server = server;
    signal(SIGINT, sigint_handler);
    
    printf("LogCrafter-C server listening on port %d\n", server->port);
    return 0;
}

void server_run(log_server_t* server) {
    struct timeval tv;
    int select_ret;
    
    while (server->running) {
        // [SEQUENCE: 14] Copy master set for select
        server->read_set = server->master_set;
        
        // [SEQUENCE: 15] Set timeout for select
        tv.tv_sec = 1;
        tv.tv_usec = 0;
        
        // [SEQUENCE: 16] Wait for activity
        select_ret = select(server->max_fd + 1, &server->read_set, NULL, NULL, &tv);
        
        if (select_ret < 0) {
            if (errno == EINTR) continue;
            perror("select");
            break;
        }
        
        if (select_ret == 0) continue; // Timeout
        
        // [SEQUENCE: 17] Check all file descriptors
        for (int fd = 0; fd <= server->max_fd; fd++) {
            if (!FD_ISSET(fd, &server->read_set)) continue;
            
            if (fd == server->listen_fd) {
                // [SEQUENCE: 18] New connection
                handle_new_connection(server);
            } else {
                // [SEQUENCE: 19] Client data
                handle_client_data(server, fd);
            }
        }
    }
    
    printf("\nShutting down server...\n");
}

void server_stop(log_server_t* server) {
    server->running = 0;
}

void handle_new_connection(log_server_t* server) {
    struct sockaddr_in client_addr;
    socklen_t addr_len = sizeof(client_addr);
    int new_fd;
    
    // [SEQUENCE: 20] Accept new connection
    new_fd = accept(server->listen_fd, (struct sockaddr*)&client_addr, &addr_len);
    if (new_fd < 0) {
        perror("accept");
        return;
    }
    
    // [SEQUENCE: 21] Check client limit
    if (server->client_count >= MAX_CLIENTS) {
        printf("Maximum clients reached. Rejecting connection from %s:%d\n",
               inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));
        close(new_fd);
        return;
    }
    
    // [SEQUENCE: 22] Add to master set
    FD_SET(new_fd, &server->master_set);
    if (new_fd > server->max_fd) {
        server->max_fd = new_fd;
    }
    server->client_count++;
    
    printf("New connection from %s:%d (fd=%d, total clients=%d)\n",
           inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port),
           new_fd, server->client_count);
}

void handle_client_data(log_server_t* server, int client_fd) {
    char buffer[BUFFER_SIZE];
    ssize_t bytes_read;
    
    // [SEQUENCE: 23] Read data from client
    bytes_read = recv(client_fd, buffer, BUFFER_SIZE - 1, 0);
    
    if (bytes_read <= 0) {
        if (bytes_read == 0) {
            printf("Client disconnected (fd=%d)\n", client_fd);
        } else {
            perror("recv");
        }
        close_client_connection(server, client_fd);
        return;
    }
    
    // [SEQUENCE: 24] Process log message
    buffer[bytes_read] = '\0';
    
    // Remove trailing newline if present
    if (bytes_read > 0 && buffer[bytes_read - 1] == '\n') {
        buffer[bytes_read - 1] = '\0';
    }
    
    // [SEQUENCE: 25] Output log to stdout
    printf("[LOG] %s\n", buffer);
}

void close_client_connection(log_server_t* server, int client_fd) {
    // [SEQUENCE: 26] Remove from master set
    FD_CLR(client_fd, &server->master_set);
    close(client_fd);
    server->client_count--;
    
    // [SEQUENCE: 27] Update max_fd if necessary
    if (client_fd == server->max_fd) {
        for (int i = server->max_fd - 1; i >= 0; i--) {
            if (FD_ISSET(i, &server->master_set)) {
                server->max_fd = i;
                break;
            }
        }
    }
}
